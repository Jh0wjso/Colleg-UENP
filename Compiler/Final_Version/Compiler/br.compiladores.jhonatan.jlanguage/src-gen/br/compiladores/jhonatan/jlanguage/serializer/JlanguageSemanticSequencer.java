/*
 * generated by Xtext 2.30.0-SNAPSHOT
 */
package br.compiladores.jhonatan.jlanguage.serializer;

import br.compiladores.jhonatan.jlanguage.jlanguage.ChamadaFuncao;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoAtibuicao;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoCondicao;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoEntrada;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoRepeticao;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoSaida;
import br.compiladores.jhonatan.jlanguage.jlanguage.ComandoSubAlgoritmo;
import br.compiladores.jhonatan.jlanguage.jlanguage.Declaracao;
import br.compiladores.jhonatan.jlanguage.jlanguage.ExpressaoAritmetica;
import br.compiladores.jhonatan.jlanguage.jlanguage.ExpressaoRelacional;
import br.compiladores.jhonatan.jlanguage.jlanguage.FatorNumero;
import br.compiladores.jhonatan.jlanguage.jlanguage.FatorSubExpressao;
import br.compiladores.jhonatan.jlanguage.jlanguage.FatorVariavel;
import br.compiladores.jhonatan.jlanguage.jlanguage.Funcao;
import br.compiladores.jhonatan.jlanguage.jlanguage.JlanguagePackage;
import br.compiladores.jhonatan.jlanguage.jlanguage.OutroFatorAritmetico;
import br.compiladores.jhonatan.jlanguage.jlanguage.OutroTermoAritmetico;
import br.compiladores.jhonatan.jlanguage.jlanguage.OutroTermoRelacional;
import br.compiladores.jhonatan.jlanguage.jlanguage.Programa;
import br.compiladores.jhonatan.jlanguage.jlanguage.TermoAritmetico;
import br.compiladores.jhonatan.jlanguage.jlanguage.TermoComparacaoRelacional;
import br.compiladores.jhonatan.jlanguage.jlanguage.TermoSubExpressaoRelacional;
import br.compiladores.jhonatan.jlanguage.services.JlanguageGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JlanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JlanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JlanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JlanguagePackage.CHAMADA_FUNCAO:
				sequence_ChamadaFuncao(context, (ChamadaFuncao) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_ATIBUICAO:
				sequence_ComandoAtibuicao(context, (ComandoAtibuicao) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_CONDICAO:
				sequence_ComandoCondicao(context, (ComandoCondicao) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_ENTRADA:
				sequence_ComandoEntrada(context, (ComandoEntrada) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_REPETICAO:
				sequence_ComandoRepeticao(context, (ComandoRepeticao) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_SAIDA:
				sequence_ComandoSaida(context, (ComandoSaida) semanticObject); 
				return; 
			case JlanguagePackage.COMANDO_SUB_ALGORITMO:
				sequence_ComandoSubAlgoritmo(context, (ComandoSubAlgoritmo) semanticObject); 
				return; 
			case JlanguagePackage.DECLARACAO:
				sequence_Declaracao(context, (Declaracao) semanticObject); 
				return; 
			case JlanguagePackage.EXPRESSAO_ARITMETICA:
				sequence_ExpressaoAritmetica(context, (ExpressaoAritmetica) semanticObject); 
				return; 
			case JlanguagePackage.EXPRESSAO_RELACIONAL:
				sequence_ExpressaoRelacional(context, (ExpressaoRelacional) semanticObject); 
				return; 
			case JlanguagePackage.FATOR_NUMERO:
				sequence_FatorNumero(context, (FatorNumero) semanticObject); 
				return; 
			case JlanguagePackage.FATOR_SUB_EXPRESSAO:
				sequence_FatorSubExpressao(context, (FatorSubExpressao) semanticObject); 
				return; 
			case JlanguagePackage.FATOR_VARIAVEL:
				sequence_FatorVariavel(context, (FatorVariavel) semanticObject); 
				return; 
			case JlanguagePackage.FUNCAO:
				sequence_Funcao(context, (Funcao) semanticObject); 
				return; 
			case JlanguagePackage.OUTRO_FATOR_ARITMETICO:
				sequence_OutroFatorAritmetico(context, (OutroFatorAritmetico) semanticObject); 
				return; 
			case JlanguagePackage.OUTRO_TERMO_ARITMETICO:
				sequence_OutroTermoAritmetico(context, (OutroTermoAritmetico) semanticObject); 
				return; 
			case JlanguagePackage.OUTRO_TERMO_RELACIONAL:
				sequence_OutroTermoRelacional(context, (OutroTermoRelacional) semanticObject); 
				return; 
			case JlanguagePackage.PROGRAMA:
				sequence_Programa(context, (Programa) semanticObject); 
				return; 
			case JlanguagePackage.TERMO_ARITMETICO:
				sequence_TermoAritmetico(context, (TermoAritmetico) semanticObject); 
				return; 
			case JlanguagePackage.TERMO_COMPARACAO_RELACIONAL:
				sequence_TermoComparacaoRelacional(context, (TermoComparacaoRelacional) semanticObject); 
				return; 
			case JlanguagePackage.TERMO_SUB_EXPRESSAO_RELACIONAL:
				sequence_TermoSubExpressaoRelacional(context, (TermoSubExpressaoRelacional) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ChamadaFuncao returns ChamadaFuncao
	 *
	 * Constraint:
	 *     (name=ID (argumentos+=ExpressaoAritmetica argumentos+=ExpressaoAritmetica*)?)
	 * </pre>
	 */
	protected void sequence_ChamadaFuncao(ISerializationContext context, ChamadaFuncao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoAtibuicao
	 *     ComandoAtibuicao returns ComandoAtibuicao
	 *
	 * Constraint:
	 *     (exp=ExpressaoAritmetica variavel=[Declaracao|ID])
	 * </pre>
	 */
	protected void sequence_ComandoAtibuicao(ISerializationContext context, ComandoAtibuicao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_ATIBUICAO__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_ATIBUICAO__EXP));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_ATIBUICAO__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_ATIBUICAO__VARIAVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoAtibuicaoAccess().getExpExpressaoAritmeticaParserRuleCall_1_0(), semanticObject.getExp());
		feeder.accept(grammarAccess.getComandoAtibuicaoAccess().getVariavelDeclaracaoIDTerminalRuleCall_3_0_1(), semanticObject.eGet(JlanguagePackage.Literals.COMANDO_ATIBUICAO__VARIAVEL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoCondicao
	 *     ComandoCondicao returns ComandoCondicao
	 *
	 * Constraint:
	 *     (exp=ExpressaoRelacional cmd1=Comando cmd2=Comando?)
	 * </pre>
	 */
	protected void sequence_ComandoCondicao(ISerializationContext context, ComandoCondicao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoEntrada
	 *     ComandoEntrada returns ComandoEntrada
	 *
	 * Constraint:
	 *     variavel=[Declaracao|ID]
	 * </pre>
	 */
	protected void sequence_ComandoEntrada(ISerializationContext context, ComandoEntrada semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_ENTRADA__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_ENTRADA__VARIAVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoEntradaAccess().getVariavelDeclaracaoIDTerminalRuleCall_1_0_1(), semanticObject.eGet(JlanguagePackage.Literals.COMANDO_ENTRADA__VARIAVEL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoRepeticao
	 *     ComandoRepeticao returns ComandoRepeticao
	 *
	 * Constraint:
	 *     (exp=ExpressaoRelacional cmd=Comando)
	 * </pre>
	 */
	protected void sequence_ComandoRepeticao(ISerializationContext context, ComandoRepeticao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_REPETICAO__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_REPETICAO__EXP));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_REPETICAO__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_REPETICAO__CMD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoRepeticaoAccess().getExpExpressaoRelacionalParserRuleCall_1_0(), semanticObject.getExp());
		feeder.accept(grammarAccess.getComandoRepeticaoAccess().getCmdComandoParserRuleCall_2_0(), semanticObject.getCmd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoSaida
	 *     ComandoSaida returns ComandoSaida
	 *
	 * Constraint:
	 *     variavel=[Declaracao|ID]
	 * </pre>
	 */
	protected void sequence_ComandoSaida(ISerializationContext context, ComandoSaida semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.COMANDO_SAIDA__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.COMANDO_SAIDA__VARIAVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoSaidaAccess().getVariavelDeclaracaoIDTerminalRuleCall_1_0_1(), semanticObject.eGet(JlanguagePackage.Literals.COMANDO_SAIDA__VARIAVEL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Comando returns ComandoSubAlgoritmo
	 *     ComandoSubAlgoritmo returns ComandoSubAlgoritmo
	 *
	 * Constraint:
	 *     comandos+=Comando+
	 * </pre>
	 */
	protected void sequence_ComandoSubAlgoritmo(ISerializationContext context, ComandoSubAlgoritmo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaracao returns Declaracao
	 *
	 * Constraint:
	 *     (name=ID tipo=TipoVar)
	 * </pre>
	 */
	protected void sequence_Declaracao(ISerializationContext context, Declaracao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.DECLARACAO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.DECLARACAO__NAME));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.DECLARACAO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.DECLARACAO__TIPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaracaoAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeclaracaoAccess().getTipoTipoVarParserRuleCall_2_0(), semanticObject.getTipo());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressaoAritmetica returns ExpressaoAritmetica
	 *
	 * Constraint:
	 *     (termo1=TermoAritmetico outrosTermos+=OutroTermoAritmetico*)
	 * </pre>
	 */
	protected void sequence_ExpressaoAritmetica(ISerializationContext context, ExpressaoAritmetica semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpressaoRelacional returns ExpressaoRelacional
	 *
	 * Constraint:
	 *     (termo1=TermoRelacional outrosTermos+=OutroTermoRelacional*)
	 * </pre>
	 */
	protected void sequence_ExpressaoRelacional(ISerializationContext context, ExpressaoRelacional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FatorAritmetico returns FatorNumero
	 *     FatorNumero returns FatorNumero
	 *
	 * Constraint:
	 *     numero=INT
	 * </pre>
	 */
	protected void sequence_FatorNumero(ISerializationContext context, FatorNumero semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.FATOR_NUMERO__NUMERO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.FATOR_NUMERO__NUMERO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFatorNumeroAccess().getNumeroINTTerminalRuleCall_0(), semanticObject.getNumero());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FatorAritmetico returns FatorSubExpressao
	 *     FatorSubExpressao returns FatorSubExpressao
	 *
	 * Constraint:
	 *     expressao=ExpressaoAritmetica
	 * </pre>
	 */
	protected void sequence_FatorSubExpressao(ISerializationContext context, FatorSubExpressao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.FATOR_SUB_EXPRESSAO__EXPRESSAO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.FATOR_SUB_EXPRESSAO__EXPRESSAO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFatorSubExpressaoAccess().getExpressaoExpressaoAritmeticaParserRuleCall_1_0(), semanticObject.getExpressao());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FatorAritmetico returns FatorVariavel
	 *     FatorVariavel returns FatorVariavel
	 *
	 * Constraint:
	 *     variavel=[Declaracao|ID]
	 * </pre>
	 */
	protected void sequence_FatorVariavel(ISerializationContext context, FatorVariavel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.FATOR_VARIAVEL__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.FATOR_VARIAVEL__VARIAVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFatorVariavelAccess().getVariavelDeclaracaoIDTerminalRuleCall_0_1(), semanticObject.eGet(JlanguagePackage.Literals.FATOR_VARIAVEL__VARIAVEL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Funcao returns Funcao
	 *
	 * Constraint:
	 *     (name=ID (parametros+=Declaracao parametros+=Declaracao*)? tipo=TipoVar comandos=Comando)
	 * </pre>
	 */
	protected void sequence_Funcao(ISerializationContext context, Funcao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OutroFatorAritmetico returns OutroFatorAritmetico
	 *
	 * Constraint:
	 *     (operador=OpArit2 fator=FatorAritmetico)
	 * </pre>
	 */
	protected void sequence_OutroFatorAritmetico(ISerializationContext context, OutroFatorAritmetico semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_FATOR_ARITMETICO__OPERADOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_FATOR_ARITMETICO__OPERADOR));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_FATOR_ARITMETICO__FATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_FATOR_ARITMETICO__FATOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutroFatorAritmeticoAccess().getOperadorOpArit2ParserRuleCall_0_0(), semanticObject.getOperador());
		feeder.accept(grammarAccess.getOutroFatorAritmeticoAccess().getFatorFatorAritmeticoParserRuleCall_1_0(), semanticObject.getFator());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OutroTermoAritmetico returns OutroTermoAritmetico
	 *
	 * Constraint:
	 *     (operador=OpArit1 termo=TermoAritmetico)
	 * </pre>
	 */
	protected void sequence_OutroTermoAritmetico(ISerializationContext context, OutroTermoAritmetico semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_ARITMETICO__OPERADOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_ARITMETICO__OPERADOR));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_ARITMETICO__TERMO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_ARITMETICO__TERMO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutroTermoAritmeticoAccess().getOperadorOpArit1ParserRuleCall_0_0(), semanticObject.getOperador());
		feeder.accept(grammarAccess.getOutroTermoAritmeticoAccess().getTermoTermoAritmeticoParserRuleCall_1_0(), semanticObject.getTermo());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OutroTermoRelacional returns OutroTermoRelacional
	 *
	 * Constraint:
	 *     (operador=OpBool termo=TermoRelacional)
	 * </pre>
	 */
	protected void sequence_OutroTermoRelacional(ISerializationContext context, OutroTermoRelacional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_RELACIONAL__OPERADOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_RELACIONAL__OPERADOR));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_RELACIONAL__TERMO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.OUTRO_TERMO_RELACIONAL__TERMO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutroTermoRelacionalAccess().getOperadorOpBoolParserRuleCall_0_0(), semanticObject.getOperador());
		feeder.accept(grammarAccess.getOutroTermoRelacionalAccess().getTermoTermoRelacionalParserRuleCall_1_0(), semanticObject.getTermo());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Programa returns Programa
	 *
	 * Constraint:
	 *     (declaracoes+=Declaracao+ comandos+=Comando+)
	 * </pre>
	 */
	protected void sequence_Programa(ISerializationContext context, Programa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TermoAritmetico returns TermoAritmetico
	 *
	 * Constraint:
	 *     (fator1=FatorAritmetico outrosFatores+=OutroFatorAritmetico*)
	 * </pre>
	 */
	protected void sequence_TermoAritmetico(ISerializationContext context, TermoAritmetico semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TermoRelacional returns TermoComparacaoRelacional
	 *     TermoComparacaoRelacional returns TermoComparacaoRelacional
	 *
	 * Constraint:
	 *     (expr1=ExpressaoAritmetica opRel=OpRel expr2=ExpressaoAritmetica)
	 * </pre>
	 */
	protected void sequence_TermoComparacaoRelacional(ISerializationContext context, TermoComparacaoRelacional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__EXPR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__EXPR1));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__OP_REL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__OP_REL));
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__EXPR2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.TERMO_COMPARACAO_RELACIONAL__EXPR2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermoComparacaoRelacionalAccess().getExpr1ExpressaoAritmeticaParserRuleCall_0_0(), semanticObject.getExpr1());
		feeder.accept(grammarAccess.getTermoComparacaoRelacionalAccess().getOpRelOpRelParserRuleCall_1_0(), semanticObject.getOpRel());
		feeder.accept(grammarAccess.getTermoComparacaoRelacionalAccess().getExpr2ExpressaoAritmeticaParserRuleCall_2_0(), semanticObject.getExpr2());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TermoRelacional returns TermoSubExpressaoRelacional
	 *     TermoSubExpressaoRelacional returns TermoSubExpressaoRelacional
	 *
	 * Constraint:
	 *     expRel=ExpressaoRelacional
	 * </pre>
	 */
	protected void sequence_TermoSubExpressaoRelacional(ISerializationContext context, TermoSubExpressaoRelacional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JlanguagePackage.Literals.TERMO_SUB_EXPRESSAO_RELACIONAL__EXP_REL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JlanguagePackage.Literals.TERMO_SUB_EXPRESSAO_RELACIONAL__EXP_REL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermoSubExpressaoRelacionalAccess().getExpRelExpressaoRelacionalParserRuleCall_1_0(), semanticObject.getExpRel());
		feeder.finish();
	}
	
	
}
